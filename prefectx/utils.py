import os
import logging
from time import sleep
import subprocess
from threading import Thread
import yaml
import shutil
import re
import prefect

# TODO remove when fixed. likely there should be a timeout setting somewhere.
def keepalive():
    """poll the orion server to stop connection timeout"""

    def target():
        while True:
            subprocess.Popen("prefect storage ls >/dev/null", shell=True)
            sleep(100)

    Thread(target=target, daemon=True).start()


# TODO ideally dask or prefect will do this automatically
def setup_dask_logging():
    # read log settings
    logpath = os.environ.get(
        "PREFECT_LOGGING_SETTINGS_PATH", f"{prefect.logging.__path__[0]}/logging.yml"
    )
    with open(logpath) as f:
        logset = f.read()
    for x in set(re.findall("\${.*}", logset)):
        logset = logset.replace(x, os.environ.get(x[2:-1], "INFO"))
    logset = yaml.safe_load(logset)

    # set extra loggers
    extra_settings = logset["loggers"]["prefect.extra"].copy()
    extras = [
        x.strip()
        for x in os.environ.get("PREFECT_LOGGING_EXTRA_LOGGERS", "").split(",")
    ]
    for extra in extras:
        logset["loggers"][extra] = extra_settings

    # update dask settings; save here for convenience; copy to dask folder.
    HOME = os.path.expanduser("~")
    PREFECTX = os.path.abspath(os.path.dirname(__file__))
    DASK_SRC = f"{PREFECTX}/logging_daskdistributed.yaml"
    DASK_TGT = f"{HOME}/.config/dask/distributed.yaml"
    dask_set = dict()
    try:
        with open(DASK_SRC) as f:
            dask_set = yaml.safe_load(f.read())
    except FileNotFoundError:
        pass
    dask_set.update(logging=logset)
    with open(DASK_SRC, "w") as f:
        f.write(
            "##### AUTOMATICALLY GENERATED BY PREFECTX. MODIFICATIONS WILL BE OVERWRITTEN ###"
        )
        f.write(yaml.dump(dask_set))
    os.makedirs(os.path.dirname(DASK_TGT), exist_ok=True)
    shutil.copy(DASK_SRC, DASK_TGT)